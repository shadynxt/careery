{"version":3,"sources":["ng://ngx-moment/add.pipe.ts","ng://ngx-moment/calendar.pipe.ts","ng://ngx-moment/date-format.pipe.ts","ng://ngx-moment/difference.pipe.ts","ng://ngx-moment/duration.pipe.ts","ng://ngx-moment/from-unix.pipe.ts","ng://ngx-moment/parse.pipe.ts","ng://ngx-moment/subtract.pipe.ts","ng://ngx-moment/time-ago.pipe.ts","ng://ngx-moment/utc.pipe.ts","ng://ngx-moment/from-utc.pipe.ts","ng://ngx-moment/local.pipe.ts","ng://ngx-moment/locale.pipe.ts","ng://ngx-moment/parse-zone.pipe.ts","ng://ngx-moment/moment.module.ts"],"names":["momentConstructor","moment","AddPipe","prototype","transform","value","amount","unit","Error","add","Pipe","args","name","CalendarPipe","cdRef","ngZone","_this","this","initTimer","refs","midnightSub","midnight","subscribe","run","markForCheck","_i","arguments","length","formats","referenceTime","i","len","moment.isMoment","calendar","ngOnDestroy","removeTimer","unsubscribe","EventEmitter","window","timeToUpdate_1","_getMillisecondsUntilUpdate","timer","runOutsideAngular","setTimeout","emit","Date","clearTimeout","now","startOf","valueOf","pure","ChangeDetectorRef","NgZone","DateFormatPipe","format","DifferencePipe","otherValue","precision","date","date2","diff","DurationPipe","moment.duration","humanize","FromUnixPipe","moment.unix","ParsePipe","SubtractPipe","subtract","TimeAgoPipe","omitSuffix","hasChanged","lastTime","getTime","lastValue","lastOmitSuffix","lastLocale","getLocale","createTimer","lastText","from","currentTimer","momentInstance","timeToUpdate","getSecondsUntilUpdate","howOld","Math","abs","moment.isDate","locale","UtcPipe","utc","FromUtcPipe","moment.utc","LocalTimePipe","local","LocalePipe","ParseZonePipe","moment.parseZone","ANGULAR_MOMENT_PIPES","MomentModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\r\nimport {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\nconst momentConstructor = moment;\r\n\r\n@Pipe({ name: 'amAdd' })\r\nexport class AddPipe implements PipeTransform {\r\n    transform(value: any, amount: moment.DurationInputArg1, unit?: moment.DurationInputArg2): any {\r\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\r\n            throw new Error('AddPipe: missing required arguments');\r\n        }\r\n        return momentConstructor(value).add(amount, unit);\r\n    }\r\n}\r\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\r\nimport { Pipe, ChangeDetectorRef, PipeTransform, EventEmitter, OnDestroy, NgZone } from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\n\r\nconst momentConstructor = moment;\r\n\r\n@Pipe({ name: 'amCalendar', pure: false })\r\nexport class CalendarPipe implements PipeTransform, OnDestroy {\r\n\r\n  /**\r\n   * Internal reference counter, so we can clean up when no instances are in use\r\n   */\r\n  private static refs = 0;\r\n\r\n  private static timer: number | null = null;\r\n  private static midnight: EventEmitter<Date> | null = null;\r\n\r\n  private midnightSub: Subscription;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef, private ngZone: NgZone) {\r\n    // using a single static timer for all instances of this pipe for performance reasons\r\n    CalendarPipe.initTimer(ngZone);\r\n\r\n    CalendarPipe.refs++;\r\n\r\n    // values such as Today will need to be replaced with Yesterday after midnight,\r\n    // so make sure we subscribe to an EventEmitter that we set up to emit at midnight\r\n    this.midnightSub = CalendarPipe.midnight.subscribe(() => {\r\n      this.ngZone.run(() => this.cdRef.markForCheck());\r\n    });\r\n  }\r\n\r\n  transform(value: Date | moment.Moment, ...args: any[]): any {\r\n    let formats: any = null;\r\n    let referenceTime: any = null;\r\n\r\n    for (let i = 0, len = args.length; i < len; i++) {\r\n      if (args[i] !== null) {\r\n        if (typeof args[i] === 'object' && !moment.isMoment(args[i])) {\r\n          formats = args[i];\r\n        } else {\r\n          referenceTime = momentConstructor(args[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return momentConstructor(value).calendar(referenceTime, formats);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (CalendarPipe.refs > 0) {\r\n      CalendarPipe.refs--;\r\n    }\r\n\r\n    if (CalendarPipe.refs === 0) {\r\n      CalendarPipe.removeTimer();\r\n    }\r\n\r\n    this.midnightSub.unsubscribe();\r\n  }\r\n\r\n  private static initTimer(ngZone: NgZone) {\r\n    // initialize the timer\r\n    if (!CalendarPipe.midnight) {\r\n      CalendarPipe.midnight = new EventEmitter<Date>();\r\n      if (typeof window !== 'undefined') {\r\n        const timeToUpdate = CalendarPipe._getMillisecondsUntilUpdate();\r\n        CalendarPipe.timer = ngZone.runOutsideAngular(() => {\r\n          return window.setTimeout(() => {\r\n            // emit the current date\r\n            CalendarPipe.midnight.emit(new Date());\r\n\r\n            // refresh the timer\r\n            CalendarPipe.removeTimer();\r\n            CalendarPipe.initTimer(ngZone);\r\n          }, timeToUpdate);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private static removeTimer() {\r\n    if (CalendarPipe.timer) {\r\n      window.clearTimeout(CalendarPipe.timer);\r\n      CalendarPipe.timer = null;\r\n      CalendarPipe.midnight = null;\r\n    }\r\n  }\r\n\r\n  private static _getMillisecondsUntilUpdate() {\r\n    const now = momentConstructor();\r\n    const tomorrow = momentConstructor().startOf('day').add(1, 'days');\r\n    const timeToMidnight = tomorrow.valueOf() - now.valueOf();\r\n    return timeToMidnight + 1000; // 1 second after midnight\r\n  }\r\n}\r\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\r\nimport {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\nconst momentConstructor = moment;\r\n\r\n@Pipe({ name: 'amDateFormat' })\r\nexport class DateFormatPipe implements PipeTransform {\r\n  transform(value: Date | moment.Moment | string | number, ...args: any[]): string {\r\n    if (!value) { return ''; }\r\n    return momentConstructor(value).format(args[0]);\r\n  }\r\n}\r\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\r\nimport {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\nconst momentConstructor = moment;\r\n\r\n@Pipe({ name: 'amDifference' })\r\nexport class DifferencePipe implements PipeTransform {\r\n  transform(value: Date | moment.Moment,\r\n            otherValue: Date | moment.Moment,\r\n            unit?: moment.unitOfTime.Diff,\r\n            precision?: boolean): number {\r\n\r\n    const date = momentConstructor(value);\r\n    const date2 = (otherValue !== null) ? momentConstructor(otherValue) : momentConstructor();\r\n\r\n    return date.diff(date2, unit, precision);\r\n  }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\n@Pipe({ name: 'amDuration' })\r\nexport class DurationPipe implements PipeTransform {\r\n  transform(value: any, ...args: string[]): string {\r\n    if (typeof args === 'undefined' || args.length !== 1) {\r\n      throw new Error('DurationPipe: missing required time unit argument');\r\n    }\r\n    return moment.duration(value, args[0] as moment.unitOfTime.DurationConstructor).humanize();\r\n  }\r\n}\r\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\r\nimport {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\n@Pipe({ name: 'amFromUnix' })\r\nexport class FromUnixPipe implements PipeTransform {\r\n  transform(value: any, ...args: string[]): any {\r\n    if (typeof value === 'string') {\r\n      value = +value;\r\n    }\r\n    return moment.unix(value);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\nconst momentConstructor = moment;\r\n\r\n@Pipe({ name: 'amParse' })\r\nexport class ParsePipe implements PipeTransform {\r\n  transform(value: string, format: string): moment.Moment {\r\n    return momentConstructor(value, format);\r\n  }\r\n}\r\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\r\nimport {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\nconst momentConstructor = moment;\r\n\r\n@Pipe({ name: 'amSubtract' })\r\nexport class SubtractPipe implements PipeTransform {\r\n    transform(value: any, amount: moment.DurationInputArg1, unit?: moment.DurationInputArg2): any {\r\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\r\n            throw new Error('SubtractPipe: missing required arguments');\r\n        }\r\n        return momentConstructor(value).subtract(amount, unit);\r\n    }\r\n}\r\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\r\nimport {Pipe, ChangeDetectorRef, PipeTransform, OnDestroy, NgZone} from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\nconst momentConstructor = moment;\r\n\r\n@Pipe({name: 'amTimeAgo', pure: false})\r\nexport class TimeAgoPipe implements PipeTransform, OnDestroy {\r\n  private currentTimer: number | null;\r\n\r\n  private lastTime: Number;\r\n  private lastValue: moment.MomentInput;\r\n  private lastOmitSuffix: boolean;\r\n  private lastLocale?: string;\r\n  private lastText: string;\r\n\r\n  constructor(private cdRef: ChangeDetectorRef, private ngZone: NgZone) {\r\n  }\r\n\r\n  transform(value: moment.MomentInput, omitSuffix?: boolean): string {\r\n    if (this.hasChanged(value, omitSuffix)) {\r\n      this.lastTime = this.getTime(value);\r\n      this.lastValue = value;\r\n      this.lastOmitSuffix = omitSuffix;\r\n      this.lastLocale = this.getLocale(value);\r\n      this.removeTimer();\r\n      this.createTimer();\r\n      this.lastText = momentConstructor(value).from(momentConstructor(), omitSuffix);\r\n\r\n    } else {\r\n      this.createTimer();\r\n    }\r\n\r\n    return this.lastText;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.removeTimer();\r\n  }\r\n\r\n  private createTimer() {\r\n    if (this.currentTimer) {\r\n      return;\r\n    }\r\n\r\n    const momentInstance = momentConstructor(this.lastValue);\r\n    const timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;\r\n\r\n    this.currentTimer = this.ngZone.runOutsideAngular(() => {\r\n      if (typeof window !== 'undefined') {\r\n        return window.setTimeout(() => {\r\n          this.lastText = momentConstructor(this.lastValue).from(momentConstructor(), this.lastOmitSuffix);\r\n\r\n          this.currentTimer = null;\r\n          this.ngZone.run(() => this.cdRef.markForCheck());\r\n        }, timeToUpdate);\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  }\r\n\r\n  private removeTimer() {\r\n    if (this.currentTimer) {\r\n      window.clearTimeout(this.currentTimer);\r\n      this.currentTimer = null;\r\n    }\r\n  }\r\n\r\n  private getSecondsUntilUpdate(momentInstance: moment.Moment) {\r\n    const howOld = Math.abs(momentConstructor().diff(momentInstance, 'minute'));\r\n    if (howOld < 1) {\r\n      return 1;\r\n    } else if (howOld < 60) {\r\n      return 30;\r\n    } else if (howOld < 180) {\r\n      return 300;\r\n    } else {\r\n      return 3600;\r\n    }\r\n  }\r\n\r\n  private hasChanged(value: moment.MomentInput, omitSuffix?: boolean): boolean {\r\n    return this.getTime(value) !== this.lastTime\r\n      || this.getLocale(value) !== this.lastLocale\r\n      || omitSuffix !== this.lastOmitSuffix;\r\n  }\r\n\r\n  private getTime(value: moment.MomentInput): number {\r\n    if (moment.isDate(value)) {\r\n      return value.getTime();\r\n    } else if (moment.isMoment(value)) {\r\n      return value.valueOf();\r\n    } else {\r\n      return momentConstructor(value).valueOf();\r\n    }\r\n  }\r\n\r\n  private getLocale(value: moment.MomentInput): string | null {\r\n    return moment.isMoment(value) ? value.locale() : null;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\nconst momentConstructor = moment;\r\n\r\n@Pipe({ name: 'amUtc' })\r\nexport class UtcPipe implements PipeTransform {\r\n  transform(value: Date | moment.Moment | string | number): moment.Moment {\r\n    return momentConstructor(value).utc();\r\n  }\r\n}\r\n","/* ngx-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\r\nimport {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\n@Pipe({ name: 'amFromUtc' })\r\nexport class FromUtcPipe implements PipeTransform {\r\n  transform(value: any, ...args: string[]): any {\r\n    return moment.utc(value);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\nconst momentConstructor = moment;\r\n\r\n@Pipe({ name: 'amLocal' })\r\nexport class LocalTimePipe implements PipeTransform {\r\n    transform(value: Date | moment.Moment | string | number): moment.Moment {\r\n        return momentConstructor(value).local();\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\n// under systemjs, moment is actually exported as the default export, so we account for that\r\nconst momentConstructor = moment;\r\n\r\n@Pipe({ name: 'amLocale' })\r\nexport class LocalePipe implements PipeTransform {\r\n  transform(value: string, locale: string): moment.Moment {\r\n    return momentConstructor(value).locale(locale);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport * as moment from 'moment';\r\n\r\n@Pipe({ name: 'amParseZone' })\r\nexport class ParseZonePipe implements PipeTransform {\r\n  transform(value: string): moment.Moment {\r\n    return moment.parseZone(value);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { AddPipe } from './add.pipe';\r\nimport { CalendarPipe } from './calendar.pipe';\r\nimport { DateFormatPipe } from './date-format.pipe';\r\nimport { DifferencePipe } from './difference.pipe';\r\nimport { DurationPipe } from './duration.pipe';\r\nimport { FromUnixPipe } from './from-unix.pipe';\r\nimport { ParsePipe } from './parse.pipe';\r\nimport { SubtractPipe } from './subtract.pipe';\r\nimport { TimeAgoPipe } from './time-ago.pipe';\r\nimport { UtcPipe } from './utc.pipe';\r\nimport { FromUtcPipe } from './from-utc.pipe';\r\nimport { LocalTimePipe } from './local.pipe';\r\nimport { LocalePipe } from './locale.pipe';\r\nimport { ParseZonePipe } from './parse-zone.pipe';\r\n\r\nconst ANGULAR_MOMENT_PIPES = [\r\n  AddPipe,\r\n  CalendarPipe,\r\n  DateFormatPipe,\r\n  DifferencePipe,\r\n  DurationPipe,\r\n  FromUnixPipe,\r\n  ParsePipe,\r\n  SubtractPipe,\r\n  TimeAgoPipe,\r\n  UtcPipe,\r\n  FromUtcPipe,\r\n  LocalTimePipe,\r\n  LocalePipe,\r\n  ParseZonePipe\r\n];\r\n\r\n@NgModule({\r\n  declarations: ANGULAR_MOMENT_PIPES,\r\n  exports: ANGULAR_MOMENT_PIPES\r\n})\r\nexport class MomentModule { }\r\n"]}