import { Pipe, NgModule } from '@angular/core';
import { DatePipe, CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DatePipe$1 {
    /**
     * @param {?} datePipe
     */
    constructor(datePipe) {
        this.datePipe = datePipe;
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        /** @type {?} */
        let countDigits = 0;
        /** @type {?} */
        let dateStr = '';
        /** @type {?} */
        let defaultFormat = 'mediumDate';
        if (args) {
            defaultFormat = args;
        }
        if ((value === null) || (value === undefined)) {
            return value;
        }
        if (!isNaN(value)) {
            countDigits = value.toString().length;
            if (countDigits === 13) {
                /** @type {?} */
                const dtObj = new Date(value);
                dateStr = this.datePipe.transform(dtObj, defaultFormat);
            }
            else if (countDigits === 10) {
                /** @type {?} */
                const dtObj = new Date(value * 1000);
                dateStr = this.datePipe.transform(dtObj, defaultFormat);
            }
        }
        else {
            /** @type {?} */
            const dtObj = new Date(value);
            dateStr = this.datePipe.transform(dtObj, defaultFormat);
        }
        return dateStr;
    }
}
DatePipe$1.decorators = [
    { type: Pipe, args: [{
                name: 'date'
            },] },
];
/** @nocollapse */
DatePipe$1.ctorParameters = () => [
    { type: DatePipe }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DateFormatModule {
}
DateFormatModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [DatePipe$1],
                exports: [
                    DatePipe$1
                ],
                providers: [
                    DatePipe
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { DatePipe$1 as DatePipe, DateFormatModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZGF0ZS1mb3JtYXQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLWRhdGUtZm9ybWF0L2xpYi9kYXRlLnBpcGUudHMiLCJuZzovL25nLWRhdGUtZm9ybWF0L2xpYi9kYXRlLWZvcm1hdC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZVBpcGUgYXMgTmdEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBQaXBlKHtcblx0bmFtZTogJ2RhdGUnXG59KVxuZXhwb3J0IGNsYXNzIERhdGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHVibGljIGRhdGVQaXBlOiBOZ0RhdGVQaXBlXG5cdCkge31cblxuXHR0cmFuc2Zvcm0odmFsdWU6IGFueSwgYXJncz86IHN0cmluZyk6IGFueSB7XG5cdFx0bGV0IGNvdW50RGlnaXRzID0gMDtcblx0XHRsZXQgZGF0ZVN0ciA9ICcnO1xuXHRcdGxldCBkZWZhdWx0Rm9ybWF0ID0gJ21lZGl1bURhdGUnO1xuXG5cdFx0aWYgKGFyZ3MpIHtcblx0XHRcdGRlZmF1bHRGb3JtYXQgPSBhcmdzO1xuXHRcdH1cblxuXHRcdGlmICgodmFsdWUgPT09IG51bGwpIHx8ICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICghaXNOYU4odmFsdWUpKSB7XG5cdFx0XHRjb3VudERpZ2l0cyA9IHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoO1xuXHRcdFx0aWYgKGNvdW50RGlnaXRzID09PSAxMykge1xuXHRcdFx0XHRjb25zdCBkdE9iaiA9IG5ldyBEYXRlKHZhbHVlKTtcblx0XHRcdFx0ZGF0ZVN0ciA9IHRoaXMuZGF0ZVBpcGUudHJhbnNmb3JtKGR0T2JqLCBkZWZhdWx0Rm9ybWF0KTtcblx0XHRcdH0gZWxzZSBpZiAoY291bnREaWdpdHMgPT09IDEwKSB7XG5cdFx0XHRcdGNvbnN0IGR0T2JqID0gbmV3IERhdGUodmFsdWUgKiAxMDAwKTtcblx0XHRcdFx0ZGF0ZVN0ciA9IHRoaXMuZGF0ZVBpcGUudHJhbnNmb3JtKGR0T2JqLCBkZWZhdWx0Rm9ybWF0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgZHRPYmogPSBuZXcgRGF0ZSh2YWx1ZSk7XG5cdFx0XHRkYXRlU3RyID0gdGhpcy5kYXRlUGlwZS50cmFuc2Zvcm0oZHRPYmosIGRlZmF1bHRGb3JtYXQpO1xuXHRcdH1cblx0XHRyZXR1cm4gZGF0ZVN0cjtcblx0fVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlLCBEYXRlUGlwZSBhcyBOZ0RhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnLi9kYXRlLnBpcGUnO1xuXG5ATmdNb2R1bGUoe1xuXHRpbXBvcnRzOiBbXG5cdFx0Q29tbW9uTW9kdWxlXG5cdF0sXG5cdGRlY2xhcmF0aW9uczogW0RhdGVQaXBlXSxcblx0ZXhwb3J0czogW1xuXHRcdERhdGVQaXBlXG5cdF0sXG5cdHByb3ZpZGVyczogW1xuXHRcdE5nRGF0ZVBpcGVcblx0XVxufSlcbmV4cG9ydCBjbGFzcyBEYXRlRm9ybWF0TW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbIk5nRGF0ZVBpcGUiLCJEYXRlUGlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0lBUUMsWUFDUTtRQUFBLGFBQVEsR0FBUixRQUFRO0tBQ1o7Ozs7OztJQUVKLFNBQVMsQ0FBQyxLQUFVLEVBQUUsSUFBYTs7UUFDbEMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDOztRQUNwQixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7O1FBQ2pCLElBQUksYUFBYSxHQUFHLFlBQVksQ0FBQztRQUVqQyxJQUFJLElBQUksRUFBRTtZQUNULGFBQWEsR0FBRyxJQUFJLENBQUM7U0FDckI7UUFFRCxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksTUFBTSxLQUFLLEtBQUssU0FBUyxDQUFDLEVBQUU7WUFDOUMsT0FBTyxLQUFLLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbEIsV0FBVyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUM7WUFDdEMsSUFBSSxXQUFXLEtBQUssRUFBRSxFQUFFOztnQkFDdkIsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzlCLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDeEQ7aUJBQU0sSUFBSSxXQUFXLEtBQUssRUFBRSxFQUFFOztnQkFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2FBQ3hEO1NBQ0Q7YUFBTTs7WUFDTixNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QixPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsT0FBTyxPQUFPLENBQUM7S0FDZjs7O1lBcENELElBQUksU0FBQztnQkFDTCxJQUFJLEVBQUUsTUFBTTthQUNaOzs7O1lBSm9CQSxRQUFVOzs7Ozs7O0FDRC9COzs7WUFJQyxRQUFRLFNBQUM7Z0JBQ1QsT0FBTyxFQUFFO29CQUNSLFlBQVk7aUJBQ1o7Z0JBQ0QsWUFBWSxFQUFFLENBQUNDLFVBQVEsQ0FBQztnQkFDeEIsT0FBTyxFQUFFO29CQUNSQSxVQUFRO2lCQUNSO2dCQUNELFNBQVMsRUFBRTtvQkFDVkQsUUFBVTtpQkFDVjthQUNEOzs7Ozs7Ozs7Ozs7Ozs7In0=