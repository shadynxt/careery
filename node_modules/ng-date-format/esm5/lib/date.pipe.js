/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DatePipe as NgDatePipe } from '@angular/common';
var DatePipe = /** @class */ (function () {
    function DatePipe(datePipe) {
        this.datePipe = datePipe;
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    DatePipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    function (value, args) {
        /** @type {?} */
        var countDigits = 0;
        /** @type {?} */
        var dateStr = '';
        /** @type {?} */
        var defaultFormat = 'mediumDate';
        if (args) {
            defaultFormat = args;
        }
        if ((value === null) || (value === undefined)) {
            return value;
        }
        if (!isNaN(value)) {
            countDigits = value.toString().length;
            if (countDigits === 13) {
                /** @type {?} */
                var dtObj = new Date(value);
                dateStr = this.datePipe.transform(dtObj, defaultFormat);
            }
            else if (countDigits === 10) {
                /** @type {?} */
                var dtObj = new Date(value * 1000);
                dateStr = this.datePipe.transform(dtObj, defaultFormat);
            }
        }
        else {
            /** @type {?} */
            var dtObj = new Date(value);
            dateStr = this.datePipe.transform(dtObj, defaultFormat);
        }
        return dateStr;
    };
    DatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'date'
                },] },
    ];
    /** @nocollapse */
    DatePipe.ctorParameters = function () { return [
        { type: NgDatePipe }
    ]; };
    return DatePipe;
}());
export { DatePipe };
if (false) {
    /** @type {?} */
    DatePipe.prototype.datePipe;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctZGF0ZS1mb3JtYXQvIiwic291cmNlcyI6WyJsaWIvZGF0ZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsUUFBUSxJQUFJLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztJQU94RCxrQkFDUTtRQUFBLGFBQVEsR0FBUixRQUFRO0tBQ1o7Ozs7OztJQUVKLDRCQUFTOzs7OztJQUFULFVBQVUsS0FBVSxFQUFFLElBQWE7O1FBQ2xDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQzs7UUFDcEIsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDOztRQUNqQixJQUFJLGFBQWEsR0FBRyxZQUFZLENBQUM7UUFFakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNWLGFBQWEsR0FBRyxJQUFJLENBQUM7U0FDckI7UUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLEtBQUssQ0FBQztTQUNiO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLFdBQVcsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDO1lBQ3RDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDOztnQkFDeEIsSUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzlCLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDeEQ7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7O2dCQUMvQixJQUFNLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7Z0JBQ3JDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDeEQ7U0FDRDtRQUFDLElBQUksQ0FBQyxDQUFDOztZQUNQLElBQU0sS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDeEQ7UUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDO0tBQ2Y7O2dCQXBDRCxJQUFJLFNBQUM7b0JBQ0wsSUFBSSxFQUFFLE1BQU07aUJBQ1o7Ozs7Z0JBSm9CLFVBQVU7O21CQUQvQjs7U0FNYSxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZVBpcGUgYXMgTmdEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBQaXBlKHtcblx0bmFtZTogJ2RhdGUnXG59KVxuZXhwb3J0IGNsYXNzIERhdGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHVibGljIGRhdGVQaXBlOiBOZ0RhdGVQaXBlXG5cdCkge31cblxuXHR0cmFuc2Zvcm0odmFsdWU6IGFueSwgYXJncz86IHN0cmluZyk6IGFueSB7XG5cdFx0bGV0IGNvdW50RGlnaXRzID0gMDtcblx0XHRsZXQgZGF0ZVN0ciA9ICcnO1xuXHRcdGxldCBkZWZhdWx0Rm9ybWF0ID0gJ21lZGl1bURhdGUnO1xuXG5cdFx0aWYgKGFyZ3MpIHtcblx0XHRcdGRlZmF1bHRGb3JtYXQgPSBhcmdzO1xuXHRcdH1cblxuXHRcdGlmICgodmFsdWUgPT09IG51bGwpIHx8ICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICghaXNOYU4odmFsdWUpKSB7XG5cdFx0XHRjb3VudERpZ2l0cyA9IHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoO1xuXHRcdFx0aWYgKGNvdW50RGlnaXRzID09PSAxMykge1xuXHRcdFx0XHRjb25zdCBkdE9iaiA9IG5ldyBEYXRlKHZhbHVlKTtcblx0XHRcdFx0ZGF0ZVN0ciA9IHRoaXMuZGF0ZVBpcGUudHJhbnNmb3JtKGR0T2JqLCBkZWZhdWx0Rm9ybWF0KTtcblx0XHRcdH0gZWxzZSBpZiAoY291bnREaWdpdHMgPT09IDEwKSB7XG5cdFx0XHRcdGNvbnN0IGR0T2JqID0gbmV3IERhdGUodmFsdWUgKiAxMDAwKTtcblx0XHRcdFx0ZGF0ZVN0ciA9IHRoaXMuZGF0ZVBpcGUudHJhbnNmb3JtKGR0T2JqLCBkZWZhdWx0Rm9ybWF0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgZHRPYmogPSBuZXcgRGF0ZSh2YWx1ZSk7XG5cdFx0XHRkYXRlU3RyID0gdGhpcy5kYXRlUGlwZS50cmFuc2Zvcm0oZHRPYmosIGRlZmF1bHRGb3JtYXQpO1xuXHRcdH1cblx0XHRyZXR1cm4gZGF0ZVN0cjtcblx0fVxuXG59XG4iXX0=