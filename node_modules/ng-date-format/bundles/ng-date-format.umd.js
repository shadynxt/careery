(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-date-format', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ng-date-format'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DatePipe = (function () {
        function DatePipe(datePipe) {
            this.datePipe = datePipe;
        }
        /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
        DatePipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} args
         * @return {?}
         */
            function (value, args) {
                /** @type {?} */
                var countDigits = 0;
                /** @type {?} */
                var dateStr = '';
                /** @type {?} */
                var defaultFormat = 'mediumDate';
                if (args) {
                    defaultFormat = args;
                }
                if ((value === null) || (value === undefined)) {
                    return value;
                }
                if (!isNaN(value)) {
                    countDigits = value.toString().length;
                    if (countDigits === 13) {
                        /** @type {?} */
                        var dtObj = new Date(value);
                        dateStr = this.datePipe.transform(dtObj, defaultFormat);
                    }
                    else if (countDigits === 10) {
                        /** @type {?} */
                        var dtObj = new Date(value * 1000);
                        dateStr = this.datePipe.transform(dtObj, defaultFormat);
                    }
                }
                else {
                    /** @type {?} */
                    var dtObj = new Date(value);
                    dateStr = this.datePipe.transform(dtObj, defaultFormat);
                }
                return dateStr;
            };
        DatePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'date'
                    },] },
        ];
        /** @nocollapse */
        DatePipe.ctorParameters = function () {
            return [
                { type: common.DatePipe }
            ];
        };
        return DatePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DateFormatModule = (function () {
        function DateFormatModule() {
        }
        DateFormatModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [DatePipe],
                        exports: [
                            DatePipe
                        ],
                        providers: [
                            common.DatePipe
                        ]
                    },] },
        ];
        return DateFormatModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.DatePipe = DatePipe;
    exports.DateFormatModule = DateFormatModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZGF0ZS1mb3JtYXQudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZy1kYXRlLWZvcm1hdC9saWIvZGF0ZS5waXBlLnRzIiwibmc6Ly9uZy1kYXRlLWZvcm1hdC9saWIvZGF0ZS1mb3JtYXQubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVQaXBlIGFzIE5nRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5AUGlwZSh7XG5cdG5hbWU6ICdkYXRlJ1xufSlcbmV4cG9ydCBjbGFzcyBEYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHB1YmxpYyBkYXRlUGlwZTogTmdEYXRlUGlwZVxuXHQpIHt9XG5cblx0dHJhbnNmb3JtKHZhbHVlOiBhbnksIGFyZ3M/OiBzdHJpbmcpOiBhbnkge1xuXHRcdGxldCBjb3VudERpZ2l0cyA9IDA7XG5cdFx0bGV0IGRhdGVTdHIgPSAnJztcblx0XHRsZXQgZGVmYXVsdEZvcm1hdCA9ICdtZWRpdW1EYXRlJztcblxuXHRcdGlmIChhcmdzKSB7XG5cdFx0XHRkZWZhdWx0Rm9ybWF0ID0gYXJncztcblx0XHR9XG5cblx0XHRpZiAoKHZhbHVlID09PSBudWxsKSB8fCAodmFsdWUgPT09IHVuZGVmaW5lZCkpIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIWlzTmFOKHZhbHVlKSkge1xuXHRcdFx0Y291bnREaWdpdHMgPSB2YWx1ZS50b1N0cmluZygpLmxlbmd0aDtcblx0XHRcdGlmIChjb3VudERpZ2l0cyA9PT0gMTMpIHtcblx0XHRcdFx0Y29uc3QgZHRPYmogPSBuZXcgRGF0ZSh2YWx1ZSk7XG5cdFx0XHRcdGRhdGVTdHIgPSB0aGlzLmRhdGVQaXBlLnRyYW5zZm9ybShkdE9iaiwgZGVmYXVsdEZvcm1hdCk7XG5cdFx0XHR9IGVsc2UgaWYgKGNvdW50RGlnaXRzID09PSAxMCkge1xuXHRcdFx0XHRjb25zdCBkdE9iaiA9IG5ldyBEYXRlKHZhbHVlICogMTAwMCk7XG5cdFx0XHRcdGRhdGVTdHIgPSB0aGlzLmRhdGVQaXBlLnRyYW5zZm9ybShkdE9iaiwgZGVmYXVsdEZvcm1hdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IGR0T2JqID0gbmV3IERhdGUodmFsdWUpO1xuXHRcdFx0ZGF0ZVN0ciA9IHRoaXMuZGF0ZVBpcGUudHJhbnNmb3JtKGR0T2JqLCBkZWZhdWx0Rm9ybWF0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGRhdGVTdHI7XG5cdH1cblxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSwgRGF0ZVBpcGUgYXMgTmdEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBEYXRlUGlwZSB9IGZyb20gJy4vZGF0ZS5waXBlJztcblxuQE5nTW9kdWxlKHtcblx0aW1wb3J0czogW1xuXHRcdENvbW1vbk1vZHVsZVxuXHRdLFxuXHRkZWNsYXJhdGlvbnM6IFtEYXRlUGlwZV0sXG5cdGV4cG9ydHM6IFtcblx0XHREYXRlUGlwZVxuXHRdLFxuXHRwcm92aWRlcnM6IFtcblx0XHROZ0RhdGVQaXBlXG5cdF1cbn0pXG5leHBvcnQgY2xhc3MgRGF0ZUZvcm1hdE1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6WyJQaXBlIiwiTmdEYXRlUGlwZSIsIk5nTW9kdWxlIiwiQ29tbW9uTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7UUFRQyxrQkFDUTtZQUFBLGFBQVEsR0FBUixRQUFRO1NBQ1o7Ozs7OztRQUVKLDRCQUFTOzs7OztZQUFULFVBQVUsS0FBVSxFQUFFLElBQWE7O2dCQUNsQyxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7O2dCQUNwQixJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7O2dCQUNqQixJQUFJLGFBQWEsR0FBRyxZQUFZLENBQUM7Z0JBRWpDLElBQUksSUFBSSxFQUFFO29CQUNULGFBQWEsR0FBRyxJQUFJLENBQUM7aUJBQ3JCO2dCQUVELElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxNQUFNLEtBQUssS0FBSyxTQUFTLENBQUMsRUFBRTtvQkFDOUMsT0FBTyxLQUFLLENBQUM7aUJBQ2I7Z0JBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDbEIsV0FBVyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUM7b0JBQ3RDLElBQUksV0FBVyxLQUFLLEVBQUUsRUFBRTs7d0JBQ3ZCLElBQU0sS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUM5QixPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO3FCQUN4RDt5QkFBTSxJQUFJLFdBQVcsS0FBSyxFQUFFLEVBQUU7O3dCQUM5QixJQUFNLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUM7d0JBQ3JDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7cUJBQ3hEO2lCQUNEO3FCQUFNOztvQkFDTixJQUFNLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDOUIsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztpQkFDeEQ7Z0JBQ0QsT0FBTyxPQUFPLENBQUM7YUFDZjs7b0JBcENEQSxTQUFJLFNBQUM7d0JBQ0wsSUFBSSxFQUFFLE1BQU07cUJBQ1o7Ozs7O3dCQUpvQkMsZUFBVTs7O3VCQUQvQjs7Ozs7OztBQ0FBOzs7O29CQUlDQyxhQUFRLFNBQUM7d0JBQ1QsT0FBTyxFQUFFOzRCQUNSQyxtQkFBWTt5QkFDWjt3QkFDRCxZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUM7d0JBQ3hCLE9BQU8sRUFBRTs0QkFDUixRQUFRO3lCQUNSO3dCQUNELFNBQVMsRUFBRTs0QkFDVkYsZUFBVTt5QkFDVjtxQkFDRDs7K0JBZkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==