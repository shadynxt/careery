/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DatePipe as NgDatePipe } from '@angular/common';
export class DatePipe {
    /**
     * @param {?} datePipe
     */
    constructor(datePipe) {
        this.datePipe = datePipe;
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        /** @type {?} */
        let countDigits = 0;
        /** @type {?} */
        let dateStr = '';
        /** @type {?} */
        let defaultFormat = 'mediumDate';
        if (args) {
            defaultFormat = args;
        }
        if ((value === null) || (value === undefined)) {
            return value;
        }
        if (!isNaN(value)) {
            countDigits = value.toString().length;
            if (countDigits === 13) {
                /** @type {?} */
                const dtObj = new Date(value);
                dateStr = this.datePipe.transform(dtObj, defaultFormat);
            }
            else if (countDigits === 10) {
                /** @type {?} */
                const dtObj = new Date(value * 1000);
                dateStr = this.datePipe.transform(dtObj, defaultFormat);
            }
        }
        else {
            /** @type {?} */
            const dtObj = new Date(value);
            dateStr = this.datePipe.transform(dtObj, defaultFormat);
        }
        return dateStr;
    }
}
DatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'date'
            },] },
];
/** @nocollapse */
DatePipe.ctorParameters = () => [
    { type: NgDatePipe }
];
if (false) {
    /** @type {?} */
    DatePipe.prototype.datePipe;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctZGF0ZS1mb3JtYXQvIiwic291cmNlcyI6WyJsaWIvZGF0ZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsUUFBUSxJQUFJLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBS3pELE1BQU07Ozs7SUFFTCxZQUNRO1FBQUEsYUFBUSxHQUFSLFFBQVE7S0FDWjs7Ozs7O0lBRUosU0FBUyxDQUFDLEtBQVUsRUFBRSxJQUFhOztRQUNsQyxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7O1FBQ3BCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQzs7UUFDakIsSUFBSSxhQUFhLEdBQUcsWUFBWSxDQUFDO1FBRWpDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDVixhQUFhLEdBQUcsSUFBSSxDQUFDO1NBQ3JCO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDYjtRQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQztZQUN0QyxFQUFFLENBQUMsQ0FBQyxXQUFXLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzs7Z0JBQ3hCLE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM5QixPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2FBQ3hEO1lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDOztnQkFDL0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2FBQ3hEO1NBQ0Q7UUFBQyxJQUFJLENBQUMsQ0FBQzs7WUFDUCxNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QixPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQztLQUNmOzs7WUFwQ0QsSUFBSSxTQUFDO2dCQUNMLElBQUksRUFBRSxNQUFNO2FBQ1o7Ozs7WUFKb0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVQaXBlIGFzIE5nRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5AUGlwZSh7XG5cdG5hbWU6ICdkYXRlJ1xufSlcbmV4cG9ydCBjbGFzcyBEYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHB1YmxpYyBkYXRlUGlwZTogTmdEYXRlUGlwZVxuXHQpIHt9XG5cblx0dHJhbnNmb3JtKHZhbHVlOiBhbnksIGFyZ3M/OiBzdHJpbmcpOiBhbnkge1xuXHRcdGxldCBjb3VudERpZ2l0cyA9IDA7XG5cdFx0bGV0IGRhdGVTdHIgPSAnJztcblx0XHRsZXQgZGVmYXVsdEZvcm1hdCA9ICdtZWRpdW1EYXRlJztcblxuXHRcdGlmIChhcmdzKSB7XG5cdFx0XHRkZWZhdWx0Rm9ybWF0ID0gYXJncztcblx0XHR9XG5cblx0XHRpZiAoKHZhbHVlID09PSBudWxsKSB8fCAodmFsdWUgPT09IHVuZGVmaW5lZCkpIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIWlzTmFOKHZhbHVlKSkge1xuXHRcdFx0Y291bnREaWdpdHMgPSB2YWx1ZS50b1N0cmluZygpLmxlbmd0aDtcblx0XHRcdGlmIChjb3VudERpZ2l0cyA9PT0gMTMpIHtcblx0XHRcdFx0Y29uc3QgZHRPYmogPSBuZXcgRGF0ZSh2YWx1ZSk7XG5cdFx0XHRcdGRhdGVTdHIgPSB0aGlzLmRhdGVQaXBlLnRyYW5zZm9ybShkdE9iaiwgZGVmYXVsdEZvcm1hdCk7XG5cdFx0XHR9IGVsc2UgaWYgKGNvdW50RGlnaXRzID09PSAxMCkge1xuXHRcdFx0XHRjb25zdCBkdE9iaiA9IG5ldyBEYXRlKHZhbHVlICogMTAwMCk7XG5cdFx0XHRcdGRhdGVTdHIgPSB0aGlzLmRhdGVQaXBlLnRyYW5zZm9ybShkdE9iaiwgZGVmYXVsdEZvcm1hdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IGR0T2JqID0gbmV3IERhdGUodmFsdWUpO1xuXHRcdFx0ZGF0ZVN0ciA9IHRoaXMuZGF0ZVBpcGUudHJhbnNmb3JtKGR0T2JqLCBkZWZhdWx0Rm9ybWF0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGRhdGVTdHI7XG5cdH1cblxufVxuIl19