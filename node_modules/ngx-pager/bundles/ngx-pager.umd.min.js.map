{"version":3,"sources":["ng://ngx-pager/lib/ngx-pager.service.ts","ng://ngx-pager/lib/ngx-pager.component.ts","ng://ngx-pager/lib/ngx-pager.module.ts"],"names":["NgxPagerService","Injectable","args","providedIn","NgxPagerComponent","route","activeRoute","this","config","totalrow","pages","currentPage","displayPagesCount","totalPage","simple","firstLastView","error","redirectType","redirectParamName","customContent","prev","next","first","last","prototype","ngOnInit","_this","localStorage","getItem","redirect","localUrlArr","split","url","Number","rendering","removeItem","type","console","param","activeRouteObj","queryParams","name","params","subscribe","parseInt","setItem","ngOnChanges","changes","settings","displayPageCount","perPage","Math","floor","redefinePager","pageClick","event","pageNo","navigateConfig","relativeTo","navigate","path","p","push","leftCount","rightCount","leftArr","rightArr","length","concat","sort","a","b","setTimeout","render","Component","selector","template","Router","ActivatedRoute","Input","NgxPagerModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxPagerService {\n\n  constructor() { }\n}\n","import { Component,  Output, Input, EventEmitter , OnChanges, SimpleChanges} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n@Component({\n  selector: 'ngx-pager',\n  templateUrl:'./ngx-pager.component.html',\n  styleUrls: ['./ngx-pager.component.scss']\n})\nexport class NgxPagerComponent implements OnChanges {\n\n  @Input() config: any = null; // set the config\n  @Input() totalrow = null;\n  // @Output('page') page = new EventEmitter();\n  pages : Array<any> = []; // get pages\n  currentPage : number = 1; // for current page no\n  displayPagesCount: number = 3; // set no of display page \n  totalPage: number = 1; // get the total page\n  simple:boolean = false; // to set only next and prev link\n  firstLastView: boolean = false; // to set that last first button will display or not\n  error : boolean = false;\n  redirectType: string = '';\n  redirectParamName: string = '';\n\n  customContent: any = {\n    \"prev\":\"&#10094;\",\n    \"next\":\"&#x276F;\",\n    \"first\":\"&#10094;&#10094;\",\n    \"last\":\"&#x276F;&#x276F;\",\n  }\n\n\n  /* Function Name : constructor\n\t* Author : \n\t* Created Date : 06-03-2019 \n\t* Modified Date : *\n\t* Purpose : to define the all helpful objects and defin the languages data\n\t* PARAMS : cService, modalService, translate\n\t*/\n  constructor(private route: Router, private activeRoute: ActivatedRoute) {}\n  /* Function Name : ngOnInit\n\t* Author : \n\t* Created Date : 06-03-2019 \n\t* Modified Date : *\n\t* Purpose : to get data after html load\n\t* PARAMS : \n\t*/\n  ngOnInit() {\n    \n    if (localStorage.getItem('_nxp') && this.config && !this.config.redirect) {\n          \n      let localUrl = localStorage.getItem('_nxp');\n      let localUrlArr = localUrl.split(\":\");\n      if (localUrlArr[0] == this.route.url) {\n        this.currentPage = Number(localUrlArr[1]);\n      }\n      this.rendering();\n    } \n    else if (!localStorage.getItem('_nxp') && this.config && !this.config.redirect) {\n      localStorage.setItem('_nxp', this.route.url+':'+this.currentPage);\n      this.rendering();\n    }\n    else if (this.totalrow || this.totalrow == 0) {\n        this.error = true;\n    }\n    else if(this.config && this.config.redirect){\n      localStorage.removeItem(\"_nxp\");\n      if (!this.config.redirect.type) {\n        console.error(\"'type' parameter must be set with 'redirect' parameter\");\n        this.error = true;\n        return false;\n      }\n      if (!this.config.redirect.param) {\n        console.error(\"'param' parameter must be set with 'redirect' parameter\");\n        this.error = true;\n        return false;\n      }\n      if (!this.error) {\n          let activeRouteObj =  null;\n          if (this.config.redirect.type === 'q') { // query string\n            activeRouteObj = this.activeRoute.queryParams;\n            this.redirectParamName = this.config.redirect.param;\n          } else if (this.config.redirect.type === 'p') { // query parameters\n            this.redirectParamName = this.config.redirect.param.name;\n            activeRouteObj = this.activeRoute.params;\n          }\n\n          activeRouteObj.subscribe(params => {\n            if (params[this.redirectParamName]) {\n              this.currentPage = parseInt(params[this.redirectParamName]);\n            } \n            this.rendering();\n          })\n      }\n    } \n  }\n\n  ngOnChanges(changes:SimpleChanges) {\n\n    if (changes.totalrow && this.totalrow)  {\n      \n      this.settings();\n    }\n  }\n  settings() {\n    if (this.config) {\n      \n      if (this.config.firstLastView) {\n        this.firstLastView = this.config.firstLastView;\n      }\n      if (this.config.simple) {\n        this.simple = this.config.simple;\n      }\n      if (this.config.displayPageCount) {\n        this.displayPagesCount = this.config.displayPageCount;\n      }\n\n      if (this.config.customContent) {\n        if (this.config.customContent.prev) {\n          this.customContent.prev = this.config.customContent.prev;\n        }\n        if (this.config.customContent.next) {\n          this.customContent.next = this.config.customContent.next;\n        }\n        if (this.config.customContent.first) {\n          this.customContent.first = this.config.customContent.first;\n        }\n        if (this.config.customContent.last) {\n          this.customContent.last = this.config.customContent.last;\n        }\n      }\n      \n      if (this.error === false && this.totalrow && this.config.perPage) {\n        this.totalPage = this.totalrow/this.config.perPage;\n        if (this.totalPage%1 != 0) {\n          this.totalPage +=1;\n          this.totalPage = Math.floor(this.totalPage);\n        }\n      } else {\n        if (!this.totalrow) {\n          console.error(\"'totalrow' parameter must be set\");\n          this.error = true;\n          // return false;\n        }\n        if (!this.config.perPage) {\n          console.error(\"'perPage' parameter must be set\");\n          this.error = true;\n          // return false;\n        }\n      }\n      \n      if (this.error === false && this.displayPagesCount > this.totalPage) {\n        this.displayPagesCount = this.totalPage;\n      }\n      if (this.error === false) {\n        this.redefinePager();\n      }\n     \n      \n    } else {\n      console.error(\"define 'config' parameters of ngx-pager\");\n      this.error = true;\n      return false;\n    }\n  }\n  /* Function Name : pageClick\n\t* Author : \n\t* Created Date : 06-03-2019 \n\t* Modified Date : *\n\t* Purpose : event for click on page\n\t* PARAMS : pageNo\n\t*/\n  pageClick(event, pageNo) {\n    this.currentPage = pageNo;\n    // console.log(this.currentPage);\n    this.redefinePager();\n    if (!this.config.redirect) {\n      localStorage.setItem('_nxp', this.route.url+':'+this.currentPage);\n      this.rendering();\n      \n    } else {\n      let navigateConfig = {\n        relativeTo: this.activeRoute\n      }\n      if (this.config.redirect.type === 'q') {\n        navigateConfig['queryParams'] = {};\n        navigateConfig['queryParams'][this.redirectParamName] = this.currentPage;\n        navigateConfig['queryParamsHandling'] = 'merge';\n        this.route.navigate([], navigateConfig);  \n      } else if (this.config.redirect.type === 'p') {\n        if (this.config.redirect.param.path) {\n          let navigate = [this.config.redirect.param.path];\n          for (let p in this.config.redirect.param.params) {\n            if (p===this.redirectParamName) {\n              navigate.push(this.currentPage);\n            } else {\n              navigate.push(this.config.redirect.param.params[p]);\n            }\n          }\n          this.route.navigate(navigate);\n        } else {\n          console.error(\"'url' parameter must be set with 'config.redirect'\");\n          this.error = true;\n          return false;\n        }\n        \n      }\n      \n    }\n  }\n  /* Function Name : redefinePager\n\t* Author : \n\t* Created Date : 06-03-2019 \n\t* Modified Date : *\n\t* Purpose : to create pagination html\n\t* PARAMS : \n\t*/\n  redefinePager() {\n      this.pages = [];\n      this.pages.push(this.currentPage);\n      let leftCount = 0;\n      let rightCount = 0;\n      if (this.displayPagesCount%2 == 0) { // if even display number count\n        leftCount = Math.floor(this.displayPagesCount/3); // one thard in left\n        rightCount = Math.floor((this.displayPagesCount*2)/3); // two thard in right\n        if (this.displayPagesCount%6 == 0) {\n          leftCount -=1;\n        }\n      } else { // if odd display number count \n        leftCount = Math.floor((this.displayPagesCount-1)/2); // half in left\n        rightCount = Math.floor((this.displayPagesCount-1)/2); // half in right\n        \n      }\n      let leftArr=[], rightArr=[];\n      for (let p=1; p<=leftCount; p++) {\n        if ((this.currentPage-p) > 0 ) {\n          leftArr.push(this.currentPage-p);\n        }\n      }\n      if (leftArr.length < leftCount) {\n        rightCount += leftCount-leftArr.length; \n      }\n      for (let p=1; p<=rightCount; p++) {\n        if (this.currentPage+p <= this.totalPage) {\n          rightArr.push(this.currentPage+p);\n        }\n      }\n      if (rightArr.length < rightCount) {\n        leftCount += rightCount - rightArr.length  ;\n        leftArr = [];\n        for (let p=1; p<=leftCount; p++) {\n          if ((this.currentPage-p) > 0 ) {\n            leftArr.push(this.currentPage-p);\n          }\n        }\n      }\n      this.pages = this.pages.concat(leftArr);\n      this.pages = this.pages.concat(rightArr);\n      \n      this.pages.sort((a, b) => a - b);\n\n  }\n\n\n  rendering() {\n    setTimeout(()=>{\n      this.config.render(this.currentPage);\n    },5)\n  }\n}\n","import { NgModule } from '@angular/core';\n// import { BrowserModule } from '@angular/platform-browser';\nimport { CommonModule} from '@angular/common';\nimport { NgxPagerComponent } from './ngx-pager.component';\n\n@NgModule({\n  declarations: [NgxPagerComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    CommonModule,  NgxPagerComponent]\n})\nexport class NgxPagerModule { }\n"]}