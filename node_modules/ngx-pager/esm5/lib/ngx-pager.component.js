/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
var NgxPagerComponent = /** @class */ (function () {
    /* Function Name : constructor
      * Author :
      * Created Date : 06-03-2019
      * Modified Date : *
      * Purpose : to define the all helpful objects and defin the languages data
      * PARAMS : cService, modalService, translate
      */
    function NgxPagerComponent(route, activeRoute) {
        this.route = route;
        this.activeRoute = activeRoute;
        this.config = null; // set the config
        // set the config
        this.totalrow = null;
        // @Output('page') page = new EventEmitter();
        this.pages = []; // get pages
        // get pages
        this.currentPage = 1; // for current page no
        // for current page no
        this.displayPagesCount = 3; // set no of display page 
        // set no of display page 
        this.totalPage = 1; // get the total page
        // get the total page
        this.simple = false; // to set only next and prev link
        // to set only next and prev link
        this.firstLastView = false; // to set that last first button will display or not
        // to set that last first button will display or not
        this.error = false;
        this.redirectType = '';
        this.redirectParamName = '';
        this.customContent = {
            "prev": "&#10094;",
            "next": "&#x276F;",
            "first": "&#10094;&#10094;",
            "last": "&#x276F;&#x276F;",
        };
    }
    /* Function Name : ngOnInit
      * Author :
      * Created Date : 06-03-2019
      * Modified Date : *
      * Purpose : to get data after html load
      * PARAMS :
      */
    /* Function Name : ngOnInit
        * Author :
        * Created Date : 06-03-2019
        * Modified Date : *
        * Purpose : to get data after html load
        * PARAMS :
        */
    /**
     * @return {?}
     */
    NgxPagerComponent.prototype.ngOnInit = /* Function Name : ngOnInit
        * Author :
        * Created Date : 06-03-2019
        * Modified Date : *
        * Purpose : to get data after html load
        * PARAMS :
        */
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (localStorage.getItem('_nxp') && this.config && !this.config.redirect) {
            /** @type {?} */
            var localUrl = localStorage.getItem('_nxp');
            /** @type {?} */
            var localUrlArr = localUrl.split(":");
            if (localUrlArr[0] == this.route.url) {
                this.currentPage = Number(localUrlArr[1]);
            }
            this.rendering();
        }
        else if (!localStorage.getItem('_nxp') && this.config && !this.config.redirect) {
            localStorage.setItem('_nxp', this.route.url + ':' + this.currentPage);
            this.rendering();
        }
        else if (this.totalrow || this.totalrow == 0) {
            this.error = true;
        }
        else if (this.config && this.config.redirect) {
            localStorage.removeItem("_nxp");
            if (!this.config.redirect.type) {
                console.error("'type' parameter must be set with 'redirect' parameter");
                this.error = true;
                return false;
            }
            if (!this.config.redirect.param) {
                console.error("'param' parameter must be set with 'redirect' parameter");
                this.error = true;
                return false;
            }
            if (!this.error) {
                /** @type {?} */
                var activeRouteObj = null;
                if (this.config.redirect.type === 'q') { // query string
                    activeRouteObj = this.activeRoute.queryParams;
                    this.redirectParamName = this.config.redirect.param;
                }
                else if (this.config.redirect.type === 'p') { // query parameters
                    this.redirectParamName = this.config.redirect.param.name;
                    activeRouteObj = this.activeRoute.params;
                }
                activeRouteObj.subscribe((/**
                 * @param {?} params
                 * @return {?}
                 */
                function (params) {
                    if (params[_this.redirectParamName]) {
                        _this.currentPage = parseInt(params[_this.redirectParamName]);
                    }
                    _this.rendering();
                }));
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPagerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.totalrow && this.totalrow) {
            this.settings();
        }
    };
    /**
     * @return {?}
     */
    NgxPagerComponent.prototype.settings = /**
     * @return {?}
     */
    function () {
        if (this.config) {
            if (this.config.firstLastView) {
                this.firstLastView = this.config.firstLastView;
            }
            if (this.config.simple) {
                this.simple = this.config.simple;
            }
            if (this.config.displayPageCount) {
                this.displayPagesCount = this.config.displayPageCount;
            }
            if (this.config.customContent) {
                if (this.config.customContent.prev) {
                    this.customContent.prev = this.config.customContent.prev;
                }
                if (this.config.customContent.next) {
                    this.customContent.next = this.config.customContent.next;
                }
                if (this.config.customContent.first) {
                    this.customContent.first = this.config.customContent.first;
                }
                if (this.config.customContent.last) {
                    this.customContent.last = this.config.customContent.last;
                }
            }
            if (this.error === false && this.totalrow && this.config.perPage) {
                this.totalPage = this.totalrow / this.config.perPage;
                if (this.totalPage % 1 != 0) {
                    this.totalPage += 1;
                    this.totalPage = Math.floor(this.totalPage);
                }
            }
            else {
                if (!this.totalrow) {
                    console.error("'totalrow' parameter must be set");
                    this.error = true;
                    // return false;
                }
                if (!this.config.perPage) {
                    console.error("'perPage' parameter must be set");
                    this.error = true;
                    // return false;
                }
            }
            if (this.error === false && this.displayPagesCount > this.totalPage) {
                this.displayPagesCount = this.totalPage;
            }
            if (this.error === false) {
                this.redefinePager();
            }
        }
        else {
            console.error("define 'config' parameters of ngx-pager");
            this.error = true;
            return false;
        }
    };
    /* Function Name : pageClick
      * Author :
      * Created Date : 06-03-2019
      * Modified Date : *
      * Purpose : event for click on page
      * PARAMS : pageNo
      */
    /* Function Name : pageClick
        * Author :
        * Created Date : 06-03-2019
        * Modified Date : *
        * Purpose : event for click on page
        * PARAMS : pageNo
        */
    /**
     * @param {?} event
     * @param {?} pageNo
     * @return {?}
     */
    NgxPagerComponent.prototype.pageClick = /* Function Name : pageClick
        * Author :
        * Created Date : 06-03-2019
        * Modified Date : *
        * Purpose : event for click on page
        * PARAMS : pageNo
        */
    /**
     * @param {?} event
     * @param {?} pageNo
     * @return {?}
     */
    function (event, pageNo) {
        this.currentPage = pageNo;
        // console.log(this.currentPage);
        this.redefinePager();
        if (!this.config.redirect) {
            localStorage.setItem('_nxp', this.route.url + ':' + this.currentPage);
            this.rendering();
        }
        else {
            /** @type {?} */
            var navigateConfig = {
                relativeTo: this.activeRoute
            };
            if (this.config.redirect.type === 'q') {
                navigateConfig['queryParams'] = {};
                navigateConfig['queryParams'][this.redirectParamName] = this.currentPage;
                navigateConfig['queryParamsHandling'] = 'merge';
                this.route.navigate([], navigateConfig);
            }
            else if (this.config.redirect.type === 'p') {
                if (this.config.redirect.param.path) {
                    /** @type {?} */
                    var navigate = [this.config.redirect.param.path];
                    for (var p in this.config.redirect.param.params) {
                        if (p === this.redirectParamName) {
                            navigate.push(this.currentPage);
                        }
                        else {
                            navigate.push(this.config.redirect.param.params[p]);
                        }
                    }
                    this.route.navigate(navigate);
                }
                else {
                    console.error("'url' parameter must be set with 'config.redirect'");
                    this.error = true;
                    return false;
                }
            }
        }
    };
    /* Function Name : redefinePager
      * Author :
      * Created Date : 06-03-2019
      * Modified Date : *
      * Purpose : to create pagination html
      * PARAMS :
      */
    /* Function Name : redefinePager
        * Author :
        * Created Date : 06-03-2019
        * Modified Date : *
        * Purpose : to create pagination html
        * PARAMS :
        */
    /**
     * @return {?}
     */
    NgxPagerComponent.prototype.redefinePager = /* Function Name : redefinePager
        * Author :
        * Created Date : 06-03-2019
        * Modified Date : *
        * Purpose : to create pagination html
        * PARAMS :
        */
    /**
     * @return {?}
     */
    function () {
        this.pages = [];
        this.pages.push(this.currentPage);
        /** @type {?} */
        var leftCount = 0;
        /** @type {?} */
        var rightCount = 0;
        if (this.displayPagesCount % 2 == 0) { // if even display number count
            leftCount = Math.floor(this.displayPagesCount / 3); // one thard in left
            rightCount = Math.floor((this.displayPagesCount * 2) / 3); // two thard in right
            if (this.displayPagesCount % 6 == 0) {
                leftCount -= 1;
            }
        }
        else { // if odd display number count 
            leftCount = Math.floor((this.displayPagesCount - 1) / 2); // half in left
            rightCount = Math.floor((this.displayPagesCount - 1) / 2); // half in right
        }
        /** @type {?} */
        var leftArr = [];
        /** @type {?} */
        var rightArr = [];
        for (var p = 1; p <= leftCount; p++) {
            if ((this.currentPage - p) > 0) {
                leftArr.push(this.currentPage - p);
            }
        }
        if (leftArr.length < leftCount) {
            rightCount += leftCount - leftArr.length;
        }
        for (var p = 1; p <= rightCount; p++) {
            if (this.currentPage + p <= this.totalPage) {
                rightArr.push(this.currentPage + p);
            }
        }
        if (rightArr.length < rightCount) {
            leftCount += rightCount - rightArr.length;
            leftArr = [];
            for (var p = 1; p <= leftCount; p++) {
                if ((this.currentPage - p) > 0) {
                    leftArr.push(this.currentPage - p);
                }
            }
        }
        this.pages = this.pages.concat(leftArr);
        this.pages = this.pages.concat(rightArr);
        this.pages.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return a - b; }));
    };
    /**
     * @return {?}
     */
    NgxPagerComponent.prototype.rendering = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.config.render(_this.currentPage);
        }), 5);
    };
    NgxPagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-pager',
                    template: "<div class=\"ngx-pager-container\" *ngIf=\"!error && totalrow > 0\">\n<ul *ngIf=\"pages\">\n    <li class=\"arrow first\" [class.disabled]=\"currentPage==1\" *ngIf=\"firstLastView && !simple\"><a  href=\"javascript:void(0)\" (click)=\"pageClick($event, 1)\" [innerHTML]=\"customContent.first\"></a></li>\n    \n    <li class=\"arrow prev\" [class.disabled]=\"currentPage==1\"><a  href=\"javascript:void(0)\" (click)=\"pageClick($event, (currentPage-1))\" [innerHTML]=\"customContent.prev\"></a></li>\n    \n    <li *ngFor=\"let p of pages\" [class.active]=\"currentPage==p\" [class.invisible]=\"simple\">\n    <a  href=\"javascript:void(0)\" (click)=\"pageClick($event, p)\">{{ p }}</a>\n    </li>\n    \n    <li class=\"arrow next\" [class.disabled]=\"currentPage==totalPage\"><a  href=\"javascript:void(0)\" (click)=\"pageClick($event, currentPage+1)\" [innerHTML]=\"customContent.next\"></a></li>\n    \n    <li class=\"arrow last\" [class.disabled]=\"currentPage==totalPage\" *ngIf=\"firstLastView && !simple\"><a  href=\"javascript:void(0)\" (click)=\"pageClick($event, totalPage)\" [innerHTML]=\"customContent.last\"></a></li>\n</ul>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    NgxPagerComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    NgxPagerComponent.propDecorators = {
        config: [{ type: Input }],
        totalrow: [{ type: Input }]
    };
    return NgxPagerComponent;
}());
export { NgxPagerComponent };
if (false) {
    /** @type {?} */
    NgxPagerComponent.prototype.config;
    /** @type {?} */
    NgxPagerComponent.prototype.totalrow;
    /** @type {?} */
    NgxPagerComponent.prototype.pages;
    /** @type {?} */
    NgxPagerComponent.prototype.currentPage;
    /** @type {?} */
    NgxPagerComponent.prototype.displayPagesCount;
    /** @type {?} */
    NgxPagerComponent.prototype.totalPage;
    /** @type {?} */
    NgxPagerComponent.prototype.simple;
    /** @type {?} */
    NgxPagerComponent.prototype.firstLastView;
    /** @type {?} */
    NgxPagerComponent.prototype.error;
    /** @type {?} */
    NgxPagerComponent.prototype.redirectType;
    /** @type {?} */
    NgxPagerComponent.prototype.redirectParamName;
    /** @type {?} */
    NgxPagerComponent.prototype.customContent;
    /**
     * @type {?}
     * @private
     */
    NgxPagerComponent.prototype.route;
    /**
     * @type {?}
     * @private
     */
    NgxPagerComponent.prototype.activeRoute;
}
//# sourceMappingURL=data:application/json;base64,